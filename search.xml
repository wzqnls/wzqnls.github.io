<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[functools.lru_cache装饰器详解]]></title>
      <url>/2017/07/11/functools-lru-cache%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>在functools这个模块中，有lru_cache这个一个神奇的装饰器存在。functools.lru_cache的作用主要是用来做缓存，他能把相对耗时的函数结果进行保存，避免传入相同的参数重复计算。同时，缓存并不会无限增长，不用的缓存会被释放。</p>
<p>举fluent python中的例子来说：<br>首先实现一个计算运行时间的装饰器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">import functools</div><div class="line"></div><div class="line">def clock(func):</div><div class="line"></div><div class="line">	# functools.wraps(func)装饰器的作用是将func函数的相关属性复制到clock中</div><div class="line">    # 比如说__name__, __doc__等等</div><div class="line">    @functools.wraps(func)</div><div class="line">    def clocked(*args, **kwargs):</div><div class="line">        t0 = time.time()</div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        elapsed = time.time() - t0</div><div class="line">        name = func.__name__</div><div class="line">        arg_lst = []</div><div class="line">        if args:</div><div class="line">        	arg_lst.append(&apos;, &apos;.join(repr(arg) for arg in args))</div><div class="line">        if kwargs:</div><div class="line">        	pairs = [&apos;%s=%r&apos; % (k, w) for k, w in sorted(kwargs.items())]</div><div class="line">        	arg_lst.append(&apos;, &apos;.join(pairs))</div><div class="line">        arg_str = &apos;, &apos;.join(arg_lst)</div><div class="line">        print(&apos;[%0.8fs] %s(%s) -&gt; %r &apos; % (elapsed, name, arg_str, result))</div><div class="line">    return result</div></pre></td></tr></table></figure></p>
<p>接下来写一个生成第n个斐波纳契数的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from clockdeco import clock</div><div class="line"></div><div class="line">@clock</div><div class="line">def fibonacci(n):</div><div class="line">	if n &lt; 2:</div><div class="line">		return n</div><div class="line">	return fibonacci(n-2) + fibonacci(n-1)</div><div class="line"></div><div class="line">if __name__==&apos;__main__&apos;:</div><div class="line">	print(fibonacci(6))</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[0.00000041s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000051s] fibonacci(1) -&gt; 1</div><div class="line">[0.00003454s] fibonacci(2) -&gt; 1</div><div class="line">[0.00000025s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000026s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000024s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000743s] fibonacci(2) -&gt; 1</div><div class="line">[0.00001429s] fibonacci(3) -&gt; 2</div><div class="line">[0.00005602s] fibonacci(4) -&gt; 3</div><div class="line">[0.00000022s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000023s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000021s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000672s] fibonacci(2) -&gt; 1</div><div class="line">[0.00001346s] fibonacci(3) -&gt; 2</div><div class="line">[0.00000021s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000022s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000691s] fibonacci(2) -&gt; 1</div><div class="line">[0.00000022s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000027s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000022s] fibonacci(1) -&gt; 1</div><div class="line">[0.00000708s] fibonacci(2) -&gt; 1</div><div class="line">[0.00001363s] fibonacci(3) -&gt; 2</div><div class="line">[0.00002687s] fibonacci(4) -&gt; 3</div><div class="line">[0.00004682s] fibonacci(5) -&gt; 5</div><div class="line">[0.00011096s] fibonacci(6) -&gt; 8</div><div class="line">8</div></pre></td></tr></table></figure></p>
<p>有大量的重复函数计算在整个运行过程中，比如fibonacci(1)，fibonacci(2)就分别运行了多次。<br>现在给fibonacci()函数加上@functools.lru_cache()装饰器进行缓存实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from clockdeco import clock</div><div class="line"></div><div class="line">@functools.lru_cache()</div><div class="line">@clock</div><div class="line">def fibonacci(n):</div><div class="line">	if n &lt; 2:</div><div class="line">		return n</div><div class="line">	return fibonacci(n-2) + fibonacci(n-1)</div><div class="line"></div><div class="line">if __name__==&apos;__main__&apos;:</div><div class="line">	print(fibonacci(6))</div></pre></td></tr></table></figure></p>
<p>一共就多了一行代码，那看看运行结果如何。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[0.00000041s] fibonacci(0) -&gt; 0</div><div class="line">[0.00000054s] fibonacci(1) -&gt; 1</div><div class="line">[0.00004040s] fibonacci(2) -&gt; 1</div><div class="line">[0.00000104s] fibonacci(3) -&gt; 2</div><div class="line">[0.00005465s] fibonacci(4) -&gt; 3</div><div class="line">[0.00000072s] fibonacci(5) -&gt; 5</div><div class="line">[0.00006876s] fibonacci(6) -&gt; 8</div><div class="line">8</div></pre></td></tr></table></figure></p>
<p>不使用lru_cache装饰器时的运行时间是0.00011096s，加上以后变成了0.00006876s。这个效率增加的杠杆的，尤其在充斥这大量重复计算时，它更能够为程序的运行节省大量的时间。</p>
<p>另外：functools.lru_cache(maxsize=128, typed=False)有两个可选参数，我们来看看他们分别代表的意义。</p>
<p><strong> maxsize代表缓存的内存占用值，超过这个值之后，就的结果就会被释放，然后将新的计算结果进行缓存,其值应当设为2的幂 </strong></p>
<p><strong> typed若为True，则会把不同的参数类型得到的结果分开保存 </strong></p>
<p>ps：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@functools.lru_cache()</div><div class="line">@clock</div><div class="line">def fibonacci(n):</div><div class="line">	if n &lt; 2:</div><div class="line">		return n</div><div class="line">	return fibonacci(n-2) + fibonacci(n-1)</div></pre></td></tr></table></figure></p>
<p>这段代码中叠加使用了两个装饰器，那具体这两个装饰器的先后顺序是怎么样的。<br>举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@d1</div><div class="line">@d2</div><div class="line">def f():</div><div class="line">	print(&apos;f&apos;)</div></pre></td></tr></table></figure></p>
<p>等于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def f():</div><div class="line">	print(&apos;f&apos;)</div><div class="line"></div><div class="line">f = d1(d2(f))</div></pre></td></tr></table></figure></p>
<p>也就是说从下往上依次执行</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 装饰器，functools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy架构简述]]></title>
      <url>/2017/07/05/Scrapy%E6%9E%B6%E6%9E%84%E7%AE%80%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>瞅一眼官方文档给出的架构图，此图中包含了Scrapy框架的基本组件构成以及数据流的走向。<br><img src="https://ooo.0o0.ooo/2017/07/04/595b0613922a8.png" alt="scrapy_architecture_02.png"></p>
<hr>
<p>第一眼看过去，有点蒙逼是正常的，接着往下看看就会会理解了。<br>先了解了解每个组件是做什么的：</p>
<p><strong> Spiders(爬虫类): Spiders是开发者自定义的一个类，用于解析相应并提取item或下个爬取的URL </strong></p>
<p><strong> Scrapy Engine(引擎): Engine负责控制数据流在系统中的流动走向，并在指定条件下触发一些事件。同时，也可以简单理解为Scrapy中数据流的中转站 </strong></p>
<p><strong> Scheduler(调度器): Scheduler接收Engine发出的requests，并将这些requests放入到处理队列中，以便之后Engine需要时再提供 </strong></p>
<p><strong> Downloader(下载器):  Downloader负责抓取网页信息并提供给Engine，进而转发至Spider </strong></p>
<p><strong> Item Pipeline(处理管道): Item Pipeline负责处理Spiders类处理提取之后的item，典型的处理有数据清洗，验证以及持久化 </strong></p>
<hr>
<p>下面需要在介绍一下架构中存在的两种中间件</p>
<p><strong> Spider middlewares: Spider中间件作为Spider和Engine中间存在的特定钩子，处理Engine返回的responses和自身向Engine输出的requests、items </strong></p>
<p><strong> Downloader middlewares: Downloader中间件作为Engine和Downloader中间存在的特定钩子，处理从Engine发出的requests和自身向Engine返回的responses </strong></p>
<p>在后期的讲解中，会慢慢涉及中间件的开发，并利用中间件方便的完成许多功能</p>
<hr>
<p>重点讲解一下整个架构的数据流的流通过程(看图理解)：</p>
<p><strong> 1. Engine从Spider获取到第一条Requests </strong></p>
<p><strong> 2. Engine将这条Requests发送至Scheduler,然后从Spider准备接收下一条Requests </strong></p>
<p><strong> 3. Schedulers取出队列中的一条Requests发送给Engine </strong></p>
<p><strong> 4. Engine 将接收到的Requests发送至Downloader，这个过程Requests会经过Downloader Middlewares </strong></p>
<p><strong> 5. 一旦页面完成下载，Downloader会成为一个Response，然后将它发送至Engine，这个发送过程也会经过Downloader Middlewares </strong></p>
<p><strong> 6. Engine接收到Response后，将它发送至Spider进行处理，会经过Spider Middlewares </strong></p>
<p><strong> 7. Spider处理完Response然后返回items和新的Requests至Engine，会经过Spider Middlewares </strong></p>
<p><strong> 8. Engine将接收到的Item发送至Item Pipelines，然后将Requests发送至Scheduler并准备接收下一条需要爬取的Requests </strong></p>
<p><strong> 9. 一次url的爬取过程结束了，然后会重复这个爬取过程，直到Schedueler中没有Requests需要处理。 </strong></p>
<hr>
<p>通过这篇文章的阅读，可以大概了解Scrapy框架基本构成及数据流的走向。对后续Scrapy的学习会有非常大的帮助，同时为进阶的Scrapy学习及源码的剖析打下基础。</p>
]]></content>
      
        <categories>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[红绿灯下的思考]]></title>
      <url>/2017/06/10/%E7%BA%A2%E7%BB%BF%E7%81%AF%E4%B8%8B%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>今晚从健身房回家的时候，经过红绿灯时，正好红灯，停下了脚步。</p>
<p>突然意识到自己这日复一日的在人潮中涌动，在整条街中，在整个城市的灯光下，显得极为平凡，渺小。这一生，也许真的就只能是一个平凡的人，和千千万万的上班族一样为了生活奔波劳碌，来不及思考未来，来不及为真理的探索再迈近一步。</p>
<p>大学里所幻想未来的天马星空好像突然间没有了音讯，此时此刻想起那些曾经憧憬，看起来更像是无知的意淫。然而，理想还是要有的，万一真的实现了呢。</p>
<p>希望自己再今后的生活中，不被现实的压力所打倒，不被灯红酒绿所迷惑，勿忘初心，继续前行。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思考，感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[byebye-csdn]]></title>
      <url>/2017/05/27/byebye-csdn/</url>
      <content type="html"><![CDATA[<p>鉴于CSDN的广告实在是忍无可忍了，故将博客迁至此处。</p>
<p>原CSDN博客不再做更新，仍能访问，地址见站点概览。</p>
<p>最后，很高兴有了一个新的博客，新的界面，新的风格，everythind is new!<br>ps:赠桌面一张<br><img src="https://ooo.0o0.ooo/2017/05/27/5929919aa66d3.jpg" alt="desktop.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/05/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于李老师的博客]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[文章分类]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[文章标签]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
